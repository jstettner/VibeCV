networks:
  cv_net:

services:
  # ------------------------------------------------------------
  # 0. Demo camera
  # ------------------------------------------------------------
  demo_cam:
    build: ./demo_cam
    depends_on: [mediamtx]
    networks: [cv_net] # same network so "mediamtx" DNS works
    environment:
      MEDIAMTX_URL: rtsp://mediamtx:8554/demo
      FPS: 25

  # ------------------------------------------------------------
  # 1. Camera ingress & restream
  # ------------------------------------------------------------
  mediamtx:
    image: bluenviron/mediamtx:latest
    container_name: mediamtx
    restart: unless-stopped
    networks:
      - cv_net
    ports:
      - "8554:8554" # RTSP in/out
      - "1935:1935" # RTMP in/out (optional)
      - "8888:8888" # HTTP‑API / HLS preview
      - "8889:8889/udp" # RTP/UDP (optional)
    volumes:
      - ./tenants/${TENANT_ID:-default}/configs/mediamtx.yml:/mediamtx.yml:ro # tenant-specific config

  # ------------------------------------------------------------
  # 2. Message bus (Kafka‑compatible but single‑binary)
  # ------------------------------------------------------------
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.1
    container_name: redpanda
    command: >
      redpanda start \
        --smp 1 \
        --overprovisioned \
        --node-id 0 \
        --check=false \
        --kafka-addr PLAINTEXT://0.0.0.0:9092 \
        --advertise-kafka-addr PLAINTEXT://redpanda:9092
    networks:
      - cv_net
    ports:
      - "9092:9092" # Kafka API

  # ------------------------------------------------------------
  # 3. Frame sampler (FFmpeg + Python)  →  Kafka topic "frames.{camera_id}"
  # ------------------------------------------------------------
  sampler:
    build:
      context: ./
      dockerfile: ./sampler/Dockerfile
    container_name: sampler
    restart: unless-stopped
    depends_on:
      - redpanda
      - mediamtx
    environment:
      KAFKA_BROKER: redpanda:9092
      CAM_RTSP: rtsp://mediamtx:8554/demo
      CAMERA_ID: demo
      TENANT_ID: ${TENANT_ID:-default}
      TENANT_SAMPLER_PATH: /app/tenant/sampler/default_sampler.py
      TENANT_SAMPLER_CLASS: DefaultSampler
      TARGET_FPS: 5
      JPEG_Q: 80
    networks:
      - cv_net
    volumes:
      - ./interfaces:/app/interfaces:ro
      - ./tenants/${TENANT_ID:-default}/sampler:/app/tenant/sampler:ro

  # ------------------------------------------------------------
  # 4. Inference worker  →  Kafka topic "detections" & "events"
  # ------------------------------------------------------------
  inference:
    build:
      context: ./
      dockerfile: ./inference/Dockerfile
    container_name: inference
    restart: unless-stopped
    depends_on:
      - redpanda
    environment:
      KAFKA_BROKER: redpanda:9092
      IN_TOPIC: frames.demo
      TENANT_ID: ${TENANT_ID:-default}
      TENANT_INFERENCE_PATH: /app/tenant/inference/default_inference.py
      TENANT_INFERENCE_CLASS: DefaultInference
      CONFIDENCE_THRESHOLD: 0.4
      MODEL_NAME: yolov8n.pt
      EVENT_CHECK_INTERVAL: 1.0
    networks:
      - cv_net
    volumes:
      - shared-frames:/frames # writes cam1.jpg here
      - ./interfaces:/app/interfaces:ro
      - ./tenants/${TENANT_ID:-default}/inference:/app/tenant/inference:ro
    # Uncomment below if host has NVIDIA GPU drivers + Docker runtime
    #runtime: nvidia
    #environment:
    #  - NVIDIA_VISIBLE_DEVICES=all

  # ------------------------------------------------------------
  # 5. Preview Server
  # ------------------------------------------------------------
  preview:
    build: ./preview
    ports:
      - "8000:8000" # http://localhost:8000/stream
    volumes:
      - shared-frames:/frames:ro # read-only in the side-car
    depends_on:
      - inference

  # ------------------------------------------------------------
  # 6. Object storage for clips / thumbnails
  # ------------------------------------------------------------
  # minio:
  #   image: minio/minio:RELEASE.2024-04-18T01-20-51Z
  #   container_name: minio
  #   command: server /data --console-address ":9001"
  #   environment:
  #     MINIO_ROOT_USER: minioadmin
  #     MINIO_ROOT_PASSWORD: minioadmin
  #   ports:
  #     - "9000:9000"   # S3
  #     - "9001:9001"   # Console UI
  #   volumes:
  #     - ./minio-data:/data
  #   networks:
  #     - cv_net
  #
  # ------------------------------------------------------------
  # 7. Time‑series & metadata DB (TimescaleDB)
  # ------------------------------------------------------------
  # timescaledb:
  #   image: timescale/timescaledb-postgis:latest-pg14
  #   container_name: timescaledb
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: cv
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - ./pgdata:/var/lib/postgresql/data
  #   networks:
  #     - cv_net

volumes:
  shared-frames:
    driver: local
    driver_opts: { type: tmpfs, device: tmpfs } # in-RAM, fast, auto-cleans
